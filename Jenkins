pipeline {
    agent any
    
    environment {
        AWS_ACCOUNT_ID = 'YOUR_AWS_ACCOUNT_ID'
        AWS_REGION = 'YOUR_AWS_REGION'
        ECR_REPO_NAME = 'petclinic'
        DOCKER_IMAGE = "${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com/${ECR_REPO_NAME}"
    }
    
    stages {
        stage('Build Maven') {
            steps {
                sh 'pwd'
                sh 'mvn clean install package'
            }
        }
        
        stage('Copy Artifacts') {
            steps {
                sh 'pwd'
                sh 'cp -r target/*.jar docker'
            }
        }
        
        stage('Unit Tests') {
            steps {
                sh 'mvn test'
            }
        }
        
        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    sh 'mvn sonar:sonar'
                }
            }
        }
        
        stage('Trivy Scan') {
            steps {
                script {
                    def imageName = "${DOCKER_IMAGE}:${env.BUILD_NUMBER}"
                    sh "trivy image --exit-code 1 --severity HIGH,CRITICAL ${imageName}"
                }
            }
        }
        
        stage('Build Docker Image') {
            steps {
                script {
                    def customImage = docker.build("${DOCKER_IMAGE}:${env.BUILD_NUMBER}", "./docker")
                    docker.withRegistry("https://${AWS_ACCOUNT_ID}.dkr.ecr.${AWS_REGION}.amazonaws.com", 'ecr:aws-credentials') {
                        customImage.push()
                    }
                }
            }
        }
        
        stage('Build on AWS EKS') {
            steps {
                withKubeConfig([credentialsId: 'aws-eks-kubeconfig']) {
                    sh 'pwd'
                    sh 'cp -R helm/* .'
                    sh 'ls -ltrh'
                    sh 'pwd'
                    sh "/usr/local/bin/helm upgrade --install petclinic-app petclinic --set image.repository=${DOCKER_IMAGE} --set image.tag=${BUILD_NUMBER}"
                }
            }
        }
    }
    
    post {
        always {
            cleanWs()
        }
    }
}
